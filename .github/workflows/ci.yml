name: Bazary CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'

jobs:
  # =============================================================================
  # Code Quality and Security Checks
  # =============================================================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements/development.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/development.txt
        
    - name: Run security checks with bandit
      run: |
        pip install bandit
        bandit -r apps/ -f json -o bandit-report.json || true
        
    - name: Run code quality checks with flake8
      run: |
        pip install flake8
        flake8 apps/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 apps/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check imports with isort
      run: |
        pip install isort
        isort apps/ --check-only --diff
        
    - name: Format check with black
      run: |
        pip install black
        black apps/ --check --diff
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  # =============================================================================
  # Testing Matrix
  # =============================================================================
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_bazary
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    strategy:
      matrix:
        test-type: [unit, integration, api]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements/testing.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/testing.txt
        
    - name: Set up test environment
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_bazary" >> .env
        echo "REDIS_URL=redis://localhost:6379/0" >> .env
        
    - name: Run migrations
      run: |
        python manage.py migrate --settings=bazary.settings.testing
        
    - name: Run ${{ matrix.test-type }} tests
      run: |
        pytest -m ${{ matrix.test-type }} --cov=apps --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: ${{ matrix.test-type }}
        name: codecov-${{ matrix.test-type }}

  # =============================================================================
  # API Documentation and Validation
  # =============================================================================
  api-docs:
    name: API Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/development.txt
        
    - name: Generate API documentation
      run: |
        python manage.py spectacular --file api-schema.yml --settings=bazary.settings.development
        
    - name: Validate API schema
      run: |
        pip install openapi-spec-validator
        openapi-spec-validator api-schema.yml
        
    - name: Upload API schema
      uses: actions/upload-artifact@v4
      with:
        name: api-schema
        path: api-schema.yml

  # =============================================================================
  # Build and Push Docker Images
  # =============================================================================
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/bazary
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # =============================================================================
  # Deploy to Development Environment (develop branch)
  # =============================================================================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Deploy to development server
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.DEV_SERVER_HOST }}
        username: ${{ secrets.DEV_SERVER_USER }}
        key: ${{ secrets.DEV_SERVER_SSH_KEY }}
        port: ${{ secrets.DEV_SERVER_PORT || 22 }}
        script: |
          # Navigate to development directory
          cd /var/www/bazary-dev
          
          # Pull latest code
          git fetch origin
          git reset --hard origin/develop
          
          # Set up environment
          cp .env.development .env
          
          # Update Docker images
          docker-compose pull
          docker-compose down
          docker-compose up -d --build
          
          # Wait for services to be ready
          sleep 30
          
          # Run migrations
          docker-compose exec -T web python manage.py migrate
          
          # Collect static files
          docker-compose exec -T web python manage.py collectstatic --noinput
          
          # Health check
          curl -f http://localhost:8001/health/ || exit 1
          
          echo "Development deployment completed successfully"

  # =============================================================================
  # Deploy to Production Environment (main branch)
  # =============================================================================
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Deploy to production server
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.PROD_SERVER_HOST }}
        username: ${{ secrets.PROD_SERVER_USER }}
        key: ${{ secrets.PROD_SERVER_SSH_KEY }}
        port: ${{ secrets.PROD_SERVER_PORT || 22 }}
        script: |
          # Create backup before deployment
          timestamp=$(date +%Y%m%d_%H%M%S)
          sudo -u postgres pg_dump bazary_prod > /var/backups/bazary/db_backup_$timestamp.sql
          
          # Navigate to production directory
          cd /var/www/bazary-prod
          
          # Pull latest code
          git fetch origin
          git reset --hard origin/main
          
          # Set up environment
          cp .env.production .env
          
          # Update Docker images
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml up -d --build
          
          # Wait for services to be ready
          sleep 60
          
          # Run migrations
          docker-compose -f docker-compose.prod.yml exec -T web python manage.py migrate
          
          # Collect static files
          docker-compose -f docker-compose.prod.yml exec -T web python manage.py collectstatic --noinput
          
          # Reload Nginx
          sudo systemctl reload nginx
          
          # Health check
          curl -f http://localhost:8000/health/ || exit 1
          
          echo "Production deployment completed successfully"
          
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # =============================================================================
  # Post-Deployment Monitoring and Notifications
  # =============================================================================
  monitor:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-prod]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Run health checks
      run: |
        # Wait a bit for deployment to stabilize
        sleep 60
        
        # Check main endpoints
        curl -f ${{ secrets.PROD_SERVER_URL }}/health/
        curl -f ${{ secrets.PROD_SERVER_URL }}/api/v1/health/
        
    - name: Check database connectivity
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.PROD_SERVER_HOST }}
        username: ${{ secrets.PROD_SERVER_USER }}
        key: ${{ secrets.PROD_SERVER_SSH_KEY }}
        script: |
          cd /var/www/bazary-prod
          docker-compose -f docker-compose.prod.yml exec -T web python manage.py check --database default
          
    - name: Performance baseline check
      run: |
        # Simple performance check
        curl -w "Response time: %{time_total}s\n" -o /dev/null -s ${{ secrets.PROD_SERVER_URL }}/
        
    - name: Notify success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: |
          🚀 Bazary production deployment successful!
          
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          Author: ${{ github.actor }}
          
          All health checks passed ✅
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
