version: '3.8'

services:
  # PostgreSQL Database for Production
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: bazary_prod
      POSTGRES_USER: bazary_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bazary_user -d bazary_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - bazary_network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_prod_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - bazary_network

  # Django Web Application
  web:
    build:
      context: .
      target: production
    restart: unless-stopped
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bazary_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional - can use system Nginx instead)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - web
    networks:
      - bazary_network

volumes:
  postgres_prod_data:
  redis_prod_data:
  static_volume:
  media_volume:

networks:
  bazary_network:
    driver: bridge
